<style>
  #minimap
  {
    position: fixed;
    top: 8px;
    left: 8px;
    border: 2px inset #888;
    overflow: hidden;
    min-width: 480px;
    min-height: 480px;
    width: 53%;
    height: 100%;
    max-width: 480px;
    max-height: 480px;
  }

  #textbased
  {
    width: 100%;
    padding-left: 20px;
  }

  #textbased table
  {
    min-width: 380px;
    width: 100%;
    table-layout: fixed;
  }

  #textbased td
  {
    vertical-align: top;
    padding: 2px;
  }

  #textbased tbody td
  {
    transition: .2s all;
  }

  #textbased tbody tr:hover td, #textbased tbody tr.hover td
  {
    background-color: #515151;
  }

  #textarea:after
  {
    content: "";
    clear: both;
  }

  .health
  {
    width: 16px;
    height: 16px;
    background-color: #FFF;
    border: 1px solid #434343;
    position: relative;
    top: 2px;
  }

  .health-5 { background-color: #17d568; }
  .health-4 { background-color: #2ecc71; }
  .health-3 { background-color: #e67e22; }
  .health-2 { background-color: #ed5100; }
  .health-1 { background-color: #e74c3c; }
  .health-0 { background-color: #ed2814; }

  .health > div
  {
    margin-left: 20px;
    margin-top: -4px;
  }

  .tt
  {
    position: relative;
    display: inline-block;
    height: 16px;
  }

  .tt > div
  {
    display: none;
  }

  .tt:hover > div
  {
    position: absolute;
    bottom: -30px;
    left: 50%;
    margin-left: -64px;

    display: block;
    width: 128px;
    height: 24px;
    border: 1px solid #313131;
    background-color: #434343;
    padding: 4px;
    z-index: 999;
    text-align: center;
  }

  .tt > div > span
  {
    position: relative;
    top: -2px;
  }

  .dot
  {
    position: absolute;
    width: 3px;
    height: 3px;
    margin-top: 0px;
    margin-left: 0px;
    border: 1px solid transparent;
  }

  .dot.active
  {
    z-index: 9999 !important;
    width: 8px;
    height: 8px;
    margin-top: -2px;
    margin-left: -3px;
  }

  .zoom
  {
    position: fixed;
    left: 53%;
    top: 10px;
    display: block;
    width: 24px;
    height: 24px;
    text-align: center;
    margin-left: 20px !important;
  }

  .zoom.in
  {
    margin-left: -3px !important;
  }
</style>
<script>
  /*!
   * Crew manifest script
   */
  (function(){
    var scale_x;
    var scale_y;
    var zoom_factor = null;
    var minimap_mousedown = false;
    var minimap_mousedown_scrollLeft;
    var minimap_mousedown_scrollTop;
    var minimap_mousedown_clientX;
    var minimap_mousedown_clientY;
    var minimap_mousedown_counter = 0;
    
    function translateX(n)        { return (translate(n - 1.5, scale_x) ).toFixed(0); }
    function translateY(n)        { return (translate(n + 0.75, scale_y) ).toFixed(0); }
    function translate(n, scale)  { return (n * tile_size) * scale; }

    component.exports = {
      data: {
        zoomFactor: function(factor)
        {
          if (factor === undefined) { return zoom_factor; }
          else                      { zoom_factor = factor; }
        },
        computed: {
          minimapHeight: function() { return 480; },
          scaleX: function()        { return scale_x; },
          scaleY: function()        { return scale_y; }
      },
      onupdate: function()
      {
        var textbased               = document.getElementById("textbased");

        var html = "";
        this.get('data.mydata');
      }
    };
  })();

  function disableSelection(){ return false; };
/*
  $(window).on("onUpdateContent", function()
  {
    $("#minimap").append("<img src=\"minimap_" + z + ".png\" id=\"map\" style=\"width: auto; height: " + minimap_height + "px;\" />");

    $("body")[0].onselectstart = disableSelection;

    $("#minimap").on("click", function(e)
    {
      if (!$(e.target).is(".zoom,.dot"))
      {
        var x    = ((((e.clientX + this.scrollLeft - 8) / scale_x) / tile_size) + 1).toFixed(0);
        var y    = ((maxy - (((e.clientY + this.scrollTop - 8) / scale_y) / tile_size)) + 1).toFixed(0);

        window.location.href = "byond://?src=" + hSrc + "&action=select_position&x=" + x + "&y=" + y;
      }
    }).on("mousedown", function(e)
    {
      minimap_mousedown_scrollLeft = this.scrollLeft;
      minimap_mousedown_scrollTop = this.scrollTop;
      minimap_mousedown_clientX = e.clientX;
      minimap_mousedown_clientY = e.clientY;
      
      var c = ++minimap_mousedown_counter;
      setTimeout(function()
      {
        if (c == minimap_mousedown_counter)
        {
          minimap_mousedown = true;
          $("#minimap").css("cursor", "move");
        }
      }, 100);
    });
    
    $(document).on("mousemove", function(e)
    {
      if (minimap_mousedown)
      {
        var offsetX = minimap_mousedown_clientX - e.clientX;
        var offsetY = minimap_mousedown_clientY - e.clientY;
        
        var minimap = document.getElementById("minimap");
        minimap.scrollLeft = minimap_mousedown_scrollLeft + offsetX;
        minimap.scrollTop = minimap_mousedown_scrollTop + offsetY;
      }
    }).on("mouseup", function()
    {
      ++minimap_mousedown_counter;
      if (minimap_mousedown)
      {
        document.body.focus();
        minimap_mousedown = false;
        $("#minimap").css("cursor", "");
      }
    });

    $(window).on("resize", onResize);

    scaleMinimap(1.00);
  });

  function zoomIn()
  {
    scaleMinimap(Math.min(6.00, zoom_factor + 1.00));
  }

  function zoomOut()
  {
    scaleMinimap(Math.max(1.00, zoom_factor - 1.00));
  }

  function scaleMinimap(factor)
  {
    var $minimap          = $("#minimap");

    if (factor != zoom_factor)
    {
      zoom_factor          = factor;

      var old_map_width      = $minimap.width();
      var old_map_height      = $minimap.height();
      var old_canvas_size      = $("#minimap > img").height(); // height is assumed to be the same
      var new_canvas_size      = minimap_height * factor;      // ditto

      var old_scrollLeft      = $minimap[0].scrollLeft;
      var old_scrollTop      = $minimap[0].scrollTop;

      var old_factor        = old_canvas_size / minimap_height;
      var diff_factor        = factor - old_factor;

      var old_centerX        = ((old_map_width  / 2) * diff_factor) + old_scrollLeft;
      var old_centerY        = ((old_map_height / 2) * diff_factor) + old_scrollTop;

      $("#minimap > img").css("height", new_canvas_size + "px");
      $minimap.css("max-width", new_canvas_size + "px");

      var new_map_width      = $minimap.width();
      var new_map_height      = $minimap.height();

      var new_centerX        = (new_map_width  / 2) + old_centerX;
      var new_centerY        = (new_map_height / 2) + old_centerY;

      var scrollLeft        = new_centerX - (new_map_width  / 2);
      var scrollTop        = new_centerY - (new_map_height / 2);

      scale_x            = new_canvas_size / (maxx * tile_size);
      scale_y            = new_canvas_size / (maxy * tile_size);

      onResize();

      $minimap[0].scrollLeft    = scrollLeft;
      $minimap[0].scrollTop    = scrollTop;

      $(".dot").each(function()
      {
        var $this        = $(this);
        var tx          = translateX(parseInt($this.attr("data-x")));
        var ty          = translateY(parseInt($this.attr("data-y")));

        // Workaround for IE bug where it doesn't modify the positions.
        setTimeout(function(){ $this.css({ "top": ty + "px", "left": tx + "px" });}, 0);
      });
    }
  }

  function onResize()
  {
    if (zoom_factor == 1.00)
    {
      $(".zoom").css("left", "442px");
      $("#minimap").css("max-height", Math.min($(window).height() - 16, 480) + "px");
    }
    else
    {
      $(".zoom").css("left", ($("#minimap").width() - 34) + "px");
      $("#minimap").css("max-height", Math.min($(window).height() - 16, $("#minimap > img").height()) + "px");
    }

    if (expandHealth())
    {
      $(".colhealth").css("width", "150px");
      $(".health").removeClass("tt");
    }
    else
    {
      $(".colhealth").css("width", "24px");
      $(".health").addClass("tt");
    }

    $("body").css("padding-left", Math.min($(window).width() - 400, $("#minimap").width() - 10) + "px");
  }

  function expandHealth()
  {
    return $("#textbased").width() > 510;
  }

  var updateMap = true;

  function switchTo(i)
  {
    if (i == 1)
    {
      $("#minimap").hide();
      $("#textbased").show();
    }
    else
    {
      $("#textbased").hide();
      $("#minimap").show();
    }
  }

  var orig_scrollTop = 0;

  function clearAll()
  {
    orig_scrollTop = $(window).scrollTop();
    $("#textbased-tbody").empty();
    $("#minimap .dot").remove();
  }

  function onAfterUpdate()
  {
    $(window).scrollTop(orig_scrollTop);
  }

  function isHead(ijob)
  {
    return (ijob % 10 == 0); // head roles always end in 0
  }

  function getColor(ijob)
  {
    if    (ijob == 0)          { return "#C06616"; } // captain
    else if  (ijob >= 10 && ijob < 20)  { return "#E74C3C"; } // security
    else if (ijob >= 20 && ijob < 30)  { return "#3498DB"; } // medical
    else if (ijob >= 30 && ijob < 40)  { return "#9B59B6"; } // science
    else if (ijob >= 40 && ijob < 50)  { return "#F1C40F"; } // engineering
    else if (ijob >= 50 && ijob < 60)  { return "#F39C12"; } // cargo
    else if (ijob >= 200 && ijob < 230)  { return "#00C100"; } // Centcom
    else                { return "#C38312"; } // other / unknown
  }

  function add(name, assignment, ijob, life_status, dam1, dam2, dam3, dam4, area, pos_x, pos_y, in_range)
  {
    try              { ijob = parseInt(ijob); }
    catch (ex)          { ijob = 0; }

    var ls            = "";

    if (life_status === null)  { ls = (life_status ? "<span class=\"bad\">Deceased</span>" : "<span class=\"good\">Living</span>"); }

    var healthHTML        = "";

    if (dam1 != "" || dam2 != "" || dam3 != "" || dam4 != "")
    {
      var avg_dam        = parseInt(dam1) + parseInt(dam2) + parseInt(dam3) + parseInt(dam4);
      var i;

      if    (avg_dam <= 0)  { i = 5; }
      else if (avg_dam <= 25)  { i = 4; }
      else if (avg_dam <= 50)  { i = 3; }
      else if (avg_dam <= 75)  { i = 2; }
      else          { i = 0; }

      healthHTML = "<div class=\"health health-" + i + (expandHealth() ? "" : " tt") + "\"><div><span>(<font color=\"#3498db\">" + dam1 + "</font>/<font color=\"#2ecc71\">" + dam2 + "</font>/<font color=\"#e67e22\">" + dam3 + "</font>/<font color=\"#e74c3c\">" + dam4 + "</font>)</span></div></div>";
    }
    else
    {
      healthHTML = "<div class=\"health health-" + (life_status == "" ? -1 : (life_status == "true" ? 4 : 0)) + (expandHealth() ? "" : " tt") + "\"><div><span>Not Available</span></div></div>";
    }

    var trElem          = $("<tr></tr>").attr("data-ijob", ijob);
    var tdElem;
    var spanElem;

    tdElem            = $("<td></td>");

    var italics = false;

    if (name.length >= 7 && name.substring(0, 3) == "<i>")
    {
      name = name.substring(3, name.length - 4);
      italics = true;
    }

    spanElem          = $("<span></span>").text(name);
    
    if (italics)
    {
      spanElem.css("font-style", "italic");
    }

    if (isHead(ijob))      { spanElem.css("font-weight", "bold"); }
    
    var color          = getColor(ijob);
    
    if (color)          { spanElem.css("color", color); }

    tdElem.append(spanElem);

    if (assignment)        { tdElem.append($("<span></span>").text(" (" + assignment + ")")); }

    trElem.append(tdElem);

    tdElem            = $("<td style=\"vertical-align: top; cursor: default;\"></td>");
    tdElem.html(healthHTML);

    trElem.append(tdElem);

    tdElem            = $("<td style=\"cursor: default;\"></td>");

    if (area && pos_x && pos_y)
    {
      tdElem.append($("<div></div>").text(area).addClass("tt").append($("<div></div>").append($("<span></span>").text("(" + pos_x + ", " + pos_y + ")"))));
      tdElem.css("cursor", "pointer").on("click", function()
      {
        window.clipboardData.setData("Text", pos_x + ", " + pos_y);
      });
    }
    else            { tdElem.text("Not Available"); }

    trElem.append(tdElem);

    var item = $("#textbased-tbody > tr").filter(function(){ return parseInt($(this).attr("data-ijob")) >= ijob; }).eq(0);

    if (item.length > 0)    { trElem.insertBefore(item); }
    else            { $("#textbased-tbody").append(trElem); }

    if (updateMap && pos_x && pos_y && (in_range == "1"))
    {
      var x          = parseInt(pos_x);
      var y          = maxy - parseInt(pos_y);

      var tx          = translateX(x);
      var ty          = translateY(y);

      var dotElem        = $("<div class=\"dot\" style=\"top: " + ty + "px; left: " + tx + "px; background-color: " + color + "; z-index: " + ijob + ";\" data-x=\"" + x + "\" data-y=\"" + y + "\"></div>");

      $("#minimap").append(dotElem);

      var counter = 0;

      function enable()
      {
        ++counter;
        dotElem.addClass("active").css({ "border-color": color });
      }

      function disable()
      {
        ++counter;
        dotElem.removeClass("active").css({ "border-color": "transparent" });
      }

      function click(e)
      {
        e.preventDefault();
        e.stopPropagation();

        window.location.href = "byond://?src=" + hSrc + "&action=select_person&name=" + encodeURIComponent(name);
      }

      trElem.on("mouseover", function()
      {
        enable();

        if (zoom_factor > 1.00)
        {
          var c = counter;
          setTimeout(function()
          {
            if (c == counter)
            {
              var minimap  = document.getElementById("minimap");
              var half  = $(minimap).height() / 2;
              var offset  = $(dotElem).offset();

              minimap.scrollLeft = offset.left + minimap.scrollLeft - half;
              minimap.scrollTop = offset.top + minimap.scrollTop - half;
            }
          }, 100);
        }
      }).on("mouseout", disable).on("click", click);
      dotElem.on("mouseover", function()
      {
        trElem.addClass("hover");
        enable();
        trElem.scrollintoview();
      }).on("mouseout", function()
      {
        trElem.removeClass("hover");
        disable();
      }).on("click", click);
    }
  }
*/
</script>
<div id='minimap'><a href='javascript:zoomIn()' class='zoom in'>+</a><a href='javascript:zoomOut()' class='zoom'>-</a></div>
<div id='textbased'>
  <table>
    <colgroup>
      <col />
      <col style='width: 24px;' class='colhealth' />
      <col style='width: 180px;' />
    </colgroup>
    <thead>
      <tr>
        <td><h3>Name</h3></td>
        <td><h3>&nbsp;</h3></td>
        <td><h3>Position</h3></td>
      </tr>
    </thead>
    <tbody id='textbased-tbody'>
      {{#each items}}
        <tr>
          <td><span class='{{classes}}'>{{name}}</span></td>
          <td>{{assignment}}</td>
          <td style='vertical-align: top; cursor: default;'>
            {{#if dam1 && dam2 && dam3 && dam4}}
              <div class='health health-{{dam1_classes}}'>
                <div>
                  <span>(<font color='#3498db'>{{dam1}}</font>/<font color="#2ecc71">{{dam2}}</font>/<font color="#e67e22">{{dam3}}</font><font color="#e74c3c">{{dam4}}</font>)</span>
                </div>
              </div>
            {{#else}}
              <div class="health health-{{life_classes}}">
                <div class="tt">
                  <span>Not Available</span>
                </div>
              </div>
            {{#/if}}
          </td>
          <td style="cursor: default;">
            {{#if area && pos_x && pos_y}}
              <div>
                {{area}}
                <div class="tt">
                  <div>
                    <span><br />({{pos_x}}, {{pos_y}})
                  </div>
                </div>
              </div>
            {{#else}}
              <div>
                Not Available
              </div>
            {{#/if}}
          </td>
        </tr>
      {{/each}}
    </tbody>
  </table>
</div>